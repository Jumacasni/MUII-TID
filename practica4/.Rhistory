right = FALSE)
View(prestamo)
# Cargo el archivo .xls con los datos de accidentes
library(readxl)
prestamo <- read_excel("~/Documentos/master_ingenieria_informatica/TID/practicas/practica4_reglas/prestamo.xlsx")
# Matriz de correlación
library(corrplot)
corrplot(cor(prestamo[c(-10,-11,-12,-13)]), method="number", is.corr=FALSE)
# Elimino el atributo Experience por su fuerte relación con Age
prestamo = prestamo[c(-2)]
# Discretización de Age
table(discretize(prestamo$Age, method="frequency", breaks = 4))
prestamo <- discretizeDF(prestamo, methods = list(
Age = list(method = "frequency", breaks = 4,
labels = c("23-34", "35-44", "45-54", "55-67"))
),
default = list(method = "none")
)
# Discretización de CCAvg
table(discretize(prestamo$CCAvg, method="interval", breaks = 5))
# Discretización de la variable Mortgage
hist(prestamo$Mortgage)
# Discretización de la variable Mortgage
hist(prestamo$Mortgage)
View(edad)
# Cargo el archivo .xls con los datos de accidentes
library(readxl)
# Cargo el archivo .xls con los datos de accidentes
library(readxl)
prestamo <- read_excel("~/Documentos/master_ingenieria_informatica/TID/practicas/practica4_reglas/prestamo.xlsx")
# Matriz de correlación
library(corrplot)
corrplot(cor(prestamo[c(-10,-11,-12,-13)]), method="number", is.corr=FALSE)
View(prestamo)
corrplot(cor(prestamo[c(-10,-11,-12,-13)]), method="number", is.corr=FALSE)
# Elimino el atributo Experience por su fuerte relación con Age
prestamo = prestamo[c(-2,-4)]
# Discretización de Age
table(discretize(prestamo$Age, method="frequency", breaks = 4))
prestamo <- discretizeDF(prestamo, methods = list(
Age = list(method = "frequency", breaks = 4,
labels = c("23-34", "35-44", "45-54", "55-67"))
),
default = list(method = "none")
)
# Discretización de CCAvg
table(discretize(prestamo$CCAvg, method="interval", breaks = 5))
prestamo <- discretizeDF(prestamo, methods = list(
CCAvg = list(method = "interval", breaks = 5,
labels = c("[0-2)", "[2-4)", "[4-6)", "[6-8)", "[8-10]"))
),
default = list(method = "none")
)
# Discretización de Income
table(discretize(prestamo$Income, method="frequency", breaks = 5))
prestamo <- discretizeDF(prestamo, methods = list(
Income = list(method = "frequency", breaks = 5,
labels = c("[8-33)", "[33-52)", "[52-78)", "[78-113)", "[113-224]"))
),
default = list(method = "none")
)
# Discretización de la variable Mortgage
hist(prestamo$Mortgage)
prestamo$Mortgage <- cut(prestamo$Mortgage,
breaks = c(-Inf, 1, 250, +Inf),
labels = c("No tiene hipoteca", "Hipoteca normal",
"Hipoteca alta"), right = FALSE)
# Pasar Education a nominal
prestamo$Education <- cut(prestamo$Education,
breaks = c(1, 2, 3, 4, +Inf),
labels = c("Education level", "Undergrad",
"Graduate", "Advanced"),
right = FALSE)
# Pasar Personal Loan a nominal
prestamo$`Personal Loan` <- cut(prestamo$`Personal Loan`,
breaks = c(0, 1, +Inf),
labels = c("No acepto prestamo personal"
, "Acepto prestamo personal"), right = FALSE)
# Pasar Securities account a nominal
prestamo$`Securities Account` <- cut(prestamo$`Securities Account`,
breaks = c(0, 1, +Inf),
labels = c("No tiene cuentas de seguridad",
"Tiene cuentas de seguridad"), right = FALSE)
# Pasar CD account a nominal
prestamo$`CD Account` <- cut(prestamo$`CD Account`,
breaks = c(0, 1, +Inf),
labels = c("No tiene cuenta CD", "Tiene cuenta CD"),
right = FALSE)
# Pasar Online a nominal
prestamo$Online <- cut(prestamo$Online,
breaks = c(0, 1, +Inf),
labels = c("No usa online", "Usa online"),
right = FALSE)
# Pasar CreditCard a nominal
prestamo$CreditCard <- cut(prestamo$CreditCard,
breaks = c(0, 1, +Inf),
labels = c("No usa tarjeta", "Usa tarjeta"),
right = FALSE)
View(prestamo)
pprestamo = as(prestamo, "transactions")
View(prestamo)
# Paso a factor Family
prestamo$Family <- as.factor(pretamo$Family)
# Paso a factor Family
prestamo$Family <- as.factor(prestamo$Family)
View(prestamo)
# Cargo el archivo .xls con los datos de accidentes
library(readxl)
prestamo <- read_excel("~/Documentos/master_ingenieria_informatica/TID/practicas/practica4_reglas/prestamo.xlsx")
View(prestamo)
# Matriz de correlación
library(corrplot)
corrplot(cor(prestamo[c(-10,-11,-12,-13)]), method="number", is.corr=FALSE)
# Elimino el atributo Experience por su fuerte relación con Age
prestamo = prestamo[c(-2,-4)]
# Discretización de Age
table(discretize(prestamo$Age, method="frequency", breaks = 4))
View(prestamo)
prestamo <- discretizeDF(prestamo, methods = list(
Age = list(method = "frequency", breaks = 4,
labels = c("23-34", "35-44", "45-54", "55-67"))
),
default = list(method = "none")
)
# Discretización de CCAvg
table(discretize(prestamo$CCAvg, method="interval", breaks = 5))
prestamo <- discretizeDF(prestamo, methods = list(
CCAvg = list(method = "interval", breaks = 5,
labels = c("[0-2)", "[2-4)", "[4-6)", "[6-8)", "[8-10]"))
),
default = list(method = "none")
)
# Discretización de Income
table(discretize(prestamo$Income, method="frequency", breaks = 5))
prestamo <- discretizeDF(prestamo, methods = list(
Income = list(method = "frequency", breaks = 5,
labels = c("[8-33)", "[33-52)", "[52-78)", "[78-113)", "[113-224]"))
),
default = list(method = "none")
)
# Discretización de la variable Mortgage
hist(prestamo$Mortgage)
prestamo$Mortgage <- cut(prestamo$Mortgage,
breaks = c(-Inf, 1, 250, +Inf),
labels = c("No tiene hipoteca", "Hipoteca normal",
"Hipoteca alta"), right = FALSE)
# Pasar Education a nominal
prestamo$Education <- cut(prestamo$Education,
breaks = c(1, 2, 3, 4, +Inf),
labels = c("Education level", "Undergrad",
"Graduate", "Advanced"),
right = FALSE)
# Pasar Personal Loan a nominal
prestamo$`Personal Loan` <- cut(prestamo$`Personal Loan`,
breaks = c(0, 1, +Inf),
labels = c("No acepto prestamo personal"
, "Acepto prestamo personal"), right = FALSE)
# Pasar Securities account a nominal
prestamo$`Securities Account` <- cut(prestamo$`Securities Account`,
breaks = c(0, 1, +Inf),
labels = c("No tiene cuentas de seguridad",
"Tiene cuentas de seguridad"), right = FALSE)
# Pasar CD account a nominal
prestamo$`CD Account` <- cut(prestamo$`CD Account`,
breaks = c(0, 1, +Inf),
labels = c("No tiene cuenta CD", "Tiene cuenta CD"),
right = FALSE)
# Pasar Online a nominal
prestamo$Online <- cut(prestamo$Online,
breaks = c(0, 1, +Inf),
labels = c("No usa online", "Usa online"),
right = FALSE)
# Pasar CreditCard a nominal
prestamo$CreditCard <- cut(prestamo$CreditCard,
breaks = c(0, 1, +Inf),
labels = c("No usa tarjeta", "Usa tarjeta"),
right = FALSE)
# Paso a factor Family
prestamo$Family <- as.factor(prestamo$Family)
library(arules)
View(prestamo)
pprestamo = as(prestamo, "transactions")
summary(pprestamo)
prestamo_trans = as(prestamo, "transactions")
summary(prestamo_trans)
itemFrequencyPlot(prestamo_trans, topN = 10)
itemFrequencyPlot(prestamo_trans, topN = 11)
# Training Apriori on the dataset
rules = apriori(data = prestamo_trans, parameter = list(confidence = 0.9))
# Visualising the results
inspect(sort(rules, by = 'confidence'))
# Visualising the results
inspect(sort(rules, by = 'confidence')[1:10])
plot(rules,method="graph",interactive=TRUE,shading=NA)
plot(rules,method="graph")
library(arulesViz)
install.packages("arulesViz")
library(arulesViz)
View(rules)
# Visualising the results
inspect(sort(rules, by = 'confidence')[1:20])
rules.sub <- subset(rules, subset = rhs %pin% "Securities Account=")
inspect(rules.sub)
inspect(rules.sub)[1:10]
inspect(rules.sub[1:10])
inspect(sort(rules.sub, by='confidence')[1:10])
# Training Apriori on the dataset
rules = apriori(data = prestamo_trans, parameter = list(confidence = 0.95))
library(arules)
prestamo_trans = as(prestamo, "transactions")
summary(prestamo_trans)
itemFrequencyPlot(prestamo_trans, topN = 11)
View(prestamo)
# Subset RHS = Securities Account
rules.securities_account <- subset(rules, subset = rhs %pin% "Securities Account=")
inspect(sort(rules.securities_account, by='confidence')[1:10])
inspect(sort(rules.securities_account, by='count')[1:10])
inspect(sort(rules.securities_account, by='confidence')[1:10])
inspect(sort(rules.securities_account, by='count')[1:10])
inspect(sort(rules.securities_account, by='count')[1:10])
# Subset RHS = Securities Account
rules.securities_account <- subset(rules, subset = rhs %pin% "Securities Account=Tiene cuentas de seguridad")
inspect(sort(rules.securities_account, by='confidence')[1:10])
# Subset RHS = Securities Account
rules.securities_account <- subset(rules, subset = rhs %pin% "Securities Account=Tiene cuenta de seguridad")
inspect(sort(rules.securities_account, by='confidence')[1:10])
# Subset RHS = Securities Account
rules.securities_account <- subset(rules, subset = rhs %pin% "No tiene cuentas de seguridad")
inspect(sort(rules.securities_account, by='confidence')[1:10])
View(prestamo)
# Subset RHS = Securities Account
rules.securities_account <- subset(rules, subset = rhs %pin% "Tiene cuentas de seguridad")
inspect(sort(rules.securities_account, by='confidence')[1:10])
# Subset RHS = Securities Account
rules.securities_account <- subset(rules, subset = rhs %pin% "No tiene cuentas de seguridad")
inspect(sort(rules.securities_account, by='confidence')[1:10])
# Subset RHS = Securities Account
rules.securities_account <- subset(rules, subset = rhs %pin% "Securities Account=")
inspect(sort(rules.securities_account, by='confidence')[1:10])
inspect(sort(rules.securities_account, by='count')[1:10])
View(prestamo)
# Subset RHS = CD Account
rules.cd_account <- subset(rules, subset = rhs %pin% "CD Account=")
inspect(sort(rules.cd_account, by='confidence')[1:10])
# Subset RHS = CD Account
rules.cd_account <- subset(rules, subset = rhs %pin% "CD Account=Tiene cuenta CD")
inspect(sort(rules.cd_account, by='confidence')[1:10])
# Subset RHS = CD Account
rules.cd_account <- subset(rules, subset = rhs %pin% "CD Account=No tiene cuenta CD")
inspect(sort(rules.cd_account, by='confidence')[1:10])
# Subset RHS = CD Account
rules.cd_account <- subset(rules, subset = rhs %pin% "CD Account=")
inspect(sort(rules.cd_account, by='confidence')[1:10])
inspect(sort(rules.cd_account, by='count')[1:10])
# Subset RHS = CD Account
rules.cd_account <- subset(rules, subset = rhs %pin% "CD Account=")
inspect(sort(rules.cd_account, by='confidence')[1:10])
inspect(sort(rules.cd_account, by='count')[1:10])
View(prestamo)
# Subset RHS = Online
rules.online <- subset(rules, subset = rhs %pin% "Online=")
inspect(sort(rules.online, by='confidence')[1:10])
inspect(sort(rules.online, by='count')[1:10])
# Training Apriori on the dataset
rules = apriori(data = prestamo_trans, parameter = list(confidence = 0.95))
# Subset RHS = Online
rules.online <- subset(rules, subset = rhs %pin% "Online=")
inspect(sort(rules.online, by='confidence')[1:10])
inspect(sort(rules.online, by='count')[1:10])
View(prestamo)
# Subset RHS = Online
rules.online <- subset(rules, subset = rhs %pin% "CreditCard=")
inspect(sort(rules.online, by='confidence')[1:10])
inspect(sort(rules.online, by='count')[1:10])
# Subset RHS = CreditCard
rules.online <- subset(rules, subset = rhs %pin% "CreditCard=")
# Subset RHS = CreditCard
rules.creditcard <- subset(rules, subset = rhs %pin% "CreditCard=")
inspect(sort(rules.creditcard, by='confidence')[1:10])
inspect(sort(rules.creditcard, by='count')[1:10])
inspect(sort(rules, by='count')[1:10])
# Subset RHS = CreditCard
rules.income <- subset(rules, subset = lhs %pin% "Income=" & rhs %pin% "CreditCard=")
inspect(sort(rules.income, by='confidence')[1:10])
inspect(sort(rules.income, by='count')[1:10])
# Subset RHS = CreditCard
rules.income <- subset(rules, subset = lhs %pin% "Income=")
inspect(sort(rules.income, by='confidence')[1:10])
inspect(sort(rules.income, by='count')[1:10])
# Subset RHS = CreditCard
rules.income <- subset(rules, subset = lhs %pin% "Income=")
inspect(sort(rules.income, by='confidence')[1:10])
# Subset RHS = CreditCard
rules.income <- subset(rules, subset = lhs %pin% "Income=" & lhs %pin% "Age=")
inspect(sort(rules.income, by='confidence')[1:10])
# Subset RHS = CreditCard
rules.income <- subset(rules, subset = lhs %pin% "Income=" & lhs %pin% "Online=")
inspect(sort(rules.income, by='confidence')[1:10])
# Subset RHS = CreditCard
rules.income <- subset(rules, subset = lhs %pin% "Income=" & lhs %pin% "Mortgage=")
inspect(sort(rules.income, by='confidence')[1:10])
inspect(sort(rules.income, by='count')[1:10])
# Subset LHS = Income y Mortgage
rules.education <- subset(rules, subset = lhs %pin% "Age=" & lhs %pin% "Education=")
inspect(sort(rules.education, by='confidence')[1:10])
inspect(sort(rules.education, by='count')[1:10])
# Subset LHS = Income y Mortgage
rules.education <- subset(rules, subset = lhs %pin% "Age=" & lhs %pin% "")
inspect(sort(rules.education, by='confidence')[1:10])
inspect(sort(rules.education, by='count')[1:10])
# Subset LHS = Income y Mortgage
rules.education <- subset(rules, subset = lhs %pin% "Age=")
inspect(sort(rules.education, by='confidence')[1:10])
# Subset LHS = Income y Mortgage
rules.education <- subset(rules, subset = lhs %pin% "Age=" & lhs %pin% "Mortgage")
inspect(sort(rules.education, by='confidence')[1:10])
inspect(sort(rules.education, by='count')[1:10])
# Cargo el archivo .xls con los datos de accidentes
library(readxl)
prestamo <- read_excel("~/Documentos/master_ingenieria_informatica/TID/practicas/practica4_reglas/prestamo.xlsx")
# Matriz de correlación
library(corrplot)
corrplot(cor(prestamo[c(-10,-11,-12,-13)]), method="number", is.corr=FALSE)
# Elimino el atributo Experience por su fuerte relación con Age
prestamo = prestamo[c(-2,-4)]
# Discretización de Age
table(discretize(prestamo$Age, method="frequency", breaks = 4))
prestamo <- discretizeDF(prestamo, methods = list(
Age = list(method = "frequency", breaks = 4,
labels = c("23-34", "35-44", "45-54", "55-67"))
),
default = list(method = "none")
)
# Discretización de CCAvg
table(discretize(prestamo$CCAvg, method="interval", breaks = 5))
prestamo <- discretizeDF(prestamo, methods = list(
CCAvg = list(method = "interval", breaks = 5,
labels = c("[0-2)", "[2-4)", "[4-6)", "[6-8)", "[8-10]"))
),
default = list(method = "none")
)
# Discretización de Income
table(discretize(prestamo$Income, method="frequency", breaks = 5))
prestamo <- discretizeDF(prestamo, methods = list(
Income = list(method = "frequency", breaks = 5,
labels = c("[8-33)", "[33-52)", "[52-78)", "[78-113)", "[113-224]"))
),
default = list(method = "none")
)
# Discretización de la variable Mortgage
hist(prestamo$Mortgage)
prestamo$Mortgage <- cut(prestamo$Mortgage,
breaks = c(-Inf, 1, 250, +Inf),
labels = c("No tiene hipoteca", "Hipoteca normal",
"Hipoteca alta"), right = FALSE)
# Pasar Education a nominal
prestamo$Education <- cut(prestamo$Education,
breaks = c(1, 2, 3, 4, +Inf),
labels = c("Education level", "Undergrad",
"Graduate", "Advanced"),
right = FALSE)
# Pasar Personal Loan a nominal
prestamo$`Personal Loan` <- cut(prestamo$`Personal Loan`,
breaks = c(0, 1, +Inf),
labels = c("No acepto prestamo personal"
, "Acepto prestamo personal"), right = FALSE)
# Pasar Securities account a nominal
prestamo$`Securities Account` <- cut(prestamo$`Securities Account`,
breaks = c(0, 1, +Inf),
labels = c("No tiene cuentas de seguridad",
"Tiene cuentas de seguridad"), right = FALSE)
# Pasar CD account a nominal
prestamo$`CD Account` <- cut(prestamo$`CD Account`,
breaks = c(0, 1, +Inf),
labels = c("No tiene cuenta CD", "Tiene cuenta CD"),
right = FALSE)
# Pasar Online a nominal
prestamo$Online <- cut(prestamo$Online,
breaks = c(0, 1, +Inf),
labels = c("No usa online", "Usa online"),
right = FALSE)
# Pasar CreditCard a nominal
prestamo$CreditCard <- cut(prestamo$CreditCard,
breaks = c(0, 1, +Inf),
labels = c("No usa tarjeta", "Usa tarjeta"),
right = FALSE)
# Paso a factor Family
prestamo$Family <- as.factor(prestamo$Family)
library(arules)
prestamo_trans = as(prestamo, "transactions")
summary(prestamo_trans)
itemFrequencyPlot(prestamo_trans, topN = 11)
# Training Apriori on the dataset
rules = apriori(data = prestamo_trans, parameter = list(confidence = 0.95))
inspect(sort(rules, by='count')[1:10])
# Training Apriori on the dataset
rules = apriori(data = prestamo_trans, parameter = list(support=0.04, confidence = 0.95))
# Training Apriori on the dataset
rules = apriori(data = prestamo_trans, parameter = list(support=0.004, confidence = 0.95))
# Cargo el archivo .xls con los datos de accidentes
library(readxl)
accidentes <- read_excel("~/Documentos/master_ingenieria_informatica/TID/practicas/practica1_preparacion/accidentes.xlsx")
View(accidentes)
accidentes_sin_imputar=accidentes[c(1,2,4,6:9,11,12,14:17,19,21,23,25,27,29,31:33,35,36,40)]
accidentes_imputados=accidentes[c(1,3,5,6:8,10,11,13,14:16,18,20,22,24,26,28,30,31:32,34,35,36,40)]
# Separo el dataset en conjunto de entrenamiento y test (80% y 20%)
set.seed(1234)
ind=sample(2,nrow(accidentes),replace=TRUE,prob=c(0.8,0.2))
train=accidentes[ind==1,]
test=accidentes[ind==2,]
# Cargo la librería C5.0
library(C50)
# Hago un subset de entrenamiento y test con las variables deseadas (sin imputar)
train_frame=train[c(1,2,4,6:9,11,12,14:17,19,21,23,25,27,29,31:33,35,36,40)]
test_frame=test[c(1,2,4,6:9,11,12,14:17,19,21,23,25,27,29,31:33,35,36,40)]
# Hago otro subset pero con las variables que acaban en _I (imputadas)
train_frame_i=train[c(1,3,5,6:8,10,11,13,14:16,18,20,22,24,26,28,30,31:32,34,35,36,40)]
test_frame_i=test[c(1,3,5,6:8,10,11,13,14:16,18,20,22,24,26,28,30,31:32,34,35,36,40)]
##############################################################################
# APARTADO 1.a)                                                              #
# Ejecutar el algoritmo de prueba para clasificación (C4.5) y estudiar cómo  #
# divide las características numéricas en los árboles de decisión aprendidos.#
##############################################################################
train_frame_i$ACCIDENTE<-as.factor(train_frame_i$ACCIDENTE)
# Se crea el modelo
model <- C5.0(train_frame_i[-25],train_frame_i$ACCIDENTE)
summary(model)
predictions <- predict(model, test_frame_i, type="class")
# Los resultados en la diagonal principal
# muestran los aciertos del modelo solamente
table(predictions, test_frame_i$ACCIDENTE)
library(discretization)
# accidentes_imputados tiene como clases "tbl_df tbl data.frame",
# lo convierto a solo "data.frame
accidentes_imputados_data_frame <- as.data.frame.data.frame(accidentes_imputados)
# Aplico el algoritmo top-down CAIM sobre las variables numéricas
caim=disc.Topdown(accidentes_imputados_data_frame, method=1)
# Intervalos
caim$cutp
# Datos discretizados
accidentes_imputados_disc = caim$Disc.data
# Separo el dataset en conjunto de entrenamiento y test (80% y 20%)
ind=sample(2,nrow(accidentes_imputados_disc),replace=TRUE,prob=c(0.8,0.2))
train_imputados_disc=accidentes_imputados_disc[ind==1,]
test_imputados_disc=accidentes_imputados_disc[ind==2,]
# Se crea el modelo
train_imputados_disc$ACCIDENTE<-as.factor(train_imputados_disc$ACCIDENTE)
model <- C5.0(train_imputados_disc[-25],train_imputados_disc$ACCIDENTE)
summary(model)
predictions <- predict(model, test_imputados_disc, type="class")
# Los resultados en la diagonal principal
# muestran los aciertos del modelo solamente
table(predictions, test_imputados_disc$ACCIDENTE)
##############################################################################
# APARTADO 1.c)                                                              #
# Discretización propia                                                      #
##############################################################################
library(arules)
accidentes_imputados_disc <- accidentes_imputados_data_frame
# HOUR_I
hour_i <- accidentes_imputados_disc[,3]
hist(hour_i, breaks = 5, main = "HOUR_I")
accidentes_imputados_disc$HOUR_I <- cut(accidentes_imputados_disc$HOUR_I,
breaks = c(-Inf, 5, 20, +Inf),
labels = c("no", "hora punta", "no"),
right = FALSE)
# SPDLIM_H
spdlim_h <- accidentes_imputados_data_frame[,17]
hist(spdlim_h, breaks = 4, main = "SPDLIM_H")
table(discretize(spdlim_h, breaks = 4))
accidentes_imputados_disc <- discretizeDF(accidentes_imputados_disc, methods = list(
SPDLIM_H = list(method = "frequency", breaks = 4,
labels = c("muy baja", "baja", "normal", "alta"))
),
default = list(method = "none")
)
# WKDY_I
wkdy_i <- accidentes_imputados_disc[,2]
hist(wkdy_i, breaks = 3, main = "WKDY_I")
accidentes_imputados_disc$WKDY_I <- cut(accidentes_imputados_disc$WKDY_I,
breaks = c(-Inf, 6, +Inf),
labels = c("semana", "fin de semana"),
right = FALSE)
# VEH_INVL
accidentes_imputados_disc$VEH_INVL <- cut(accidentes_imputados_disc$VEH_INVL,
breaks = c(-Inf, 2, +Inf),
labels = c("individual", "multiple"),
right = FALSE)
# NON_INVL
accidentes_imputados_disc$NON_INVL <- cut(accidentes_imputados_disc$NON_INVL,
breaks = c(-Inf, 1, +Inf),
labels = c("no", "si"),
right = FALSE)
# PED_ACC
accidentes_imputados_disc$PED_ACC <- cut(accidentes_imputados_disc$PED_ACC,
breaks = c(-Inf, 1, +Inf),
labels = c("no", "si"),
right = FALSE)
# Se convierte a factor la clase variable y a variable numérica las variables
# que se han discretizado
accidentes_imputados_disc$ACCIDENTE<-as.factor(accidentes_imputados_disc$ACCIDENTE)
accidentes_imputados_disc$HOUR_I<-as.numeric(accidentes_imputados_disc$HOUR_I)
accidentes_imputados_disc$SPDLIM_H<-as.numeric(accidentes_imputados_disc$SPDLIM_H)
accidentes_imputados_disc$WKDY_I<-as.numeric(accidentes_imputados_disc$WKDY_I)
accidentes_imputados_disc$NON_INVL<-as.numeric(accidentes_imputados_disc$NON_INVL)
accidentes_imputados_disc$VEH_INVL<-as.numeric(accidentes_imputados_disc$VEH_INVL)
accidentes_imputados_disc$PED_ACC<-as.numeric(accidentes_imputados_disc$PED_ACC)
# Separo el dataset en conjunto de entrenamiento y test (80% y 20%)
ind=sample(2,nrow(accidentes_imputados_disc),replace=TRUE,prob=c(0.8,0.2))
View(accidentes_imputados_disc)
plot(clustering_jerarquico)
rect.hclust(clustering_jerarquico,k=3)
